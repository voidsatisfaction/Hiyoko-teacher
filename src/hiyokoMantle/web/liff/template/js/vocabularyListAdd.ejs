<script>
  function init(data) {
    const container = document.querySelector('.container')

    new VocabularyListAddView({ container, data })
  }

  class VocabularyListAddPresenter {
    constructor(view) {
      this.view = view
    }

    async sendVocabularyListData({ userId, name, meaning, contextSentence }) {
      try {
        const result = await axios.post('/DEV/hiyokoSensei/liff/vocabularyList/add', {
          userId, name, meaning, contextSentence
        })

        this.view.submitSuccess({ name })
      } catch(error) {
        alert(JSON.stringify(error))
        alert(JSON.stringify(`Something went wrong! please retry a few minutes later`))
      }
    }
  }

  class VocabularyListAddView {
    constructor({ container, data }) {
      this.liffData = data
      this.presenter = new VocabularyListAddPresenter(this)
      this.container = container

      this.initMember()
      this.initEvent()

      this.submitSuccess.bind(this)
    }

    initMember() {
      this.vocabularyNameInput = this.container.querySelector('#vocabularyNameInput')
      this.meaningInput = this.container.querySelector('#meaningInput')
      this.contextSentenceInput = this.container.querySelector('#contextSentenceInput')
      this.submitInput = this.container.querySelector('#submitInput')
    }

    initEvent() {
      this.submitInput.addEventListener('click', this._onClickSubmitButton.bind(this))
    }

    submitSuccess({ name }) {
      this.vocabularyNameInput.value = ''
      this.meaningInput.value = ''
      this.contextSentenceInput.value = ''

      const addResult = this.container.querySelector('#addResult')
      addResult.innerHTML = `
        <div class="alert alert-primary" role="alert">
          ${name} was successfully added
        </div>
      `
    }

    _onClickSubmitButton(e) {
      const userId = this.liffData.context.userId
      const name = this.vocabularyNameInput.value
      const meaning = this.meaningInput.value
      const contextSentence = this.contextSentenceInput.value

      this.presenter.sendVocabularyListData({
        userId, name, meaning, contextSentence
      })
    }
  }

  (() => {
    liff.init((data) => {
      init(data)
    })
  })()
</script>