<script>
  function init(data) {
    const container = document.querySelector('.container')

    new VocabularyListAddView({ container, data })
  }

  class VocabularyListAddPresenter {
    constructor(view) {
      this.view = view
    }

    async sendVocabularyListData({ userId, name, meaning, contextSentence }) {
      try {
        const result = await axios.post(`/<%= process.env.NODE_ENV %>/hiyokoSensei/liff/vocabularyList/add`, {
          userId, name, meaning, contextSentence
        })

        this.view.submitSuccess({ name })
      } catch(error) {
        alert(JSON.stringify(`Something went wrong! please retry a few minutes later`))
      }
    }

    async getVocabularyMeanings({ vocabulary }) {
      // array of meaning(string)
      const hiyokoLambdaClient = new HiyokoLambdaClient()
      return await hiyokoLambdaClient.glosbeTranslate({ vocabulary })
    }
  }

  class VocabularyListAddView {
    constructor({ container, data }) {
      this.liffData = data
      this.presenter = new VocabularyListAddPresenter(this)
      this.container = container

      this.lazyMeaningSearch = setInterval(() => console.log('lazySearching...'), 2 * 1000)
      this.canGlosbeUse = true

      this.initMembers()
      this.initEvents()

      this._renderVocabularyMeanings = this._renderVocabularyMeanings.bind(this)
    }

    initMembers() {
      this.vocabularyNameInput = this.container.querySelector('#vocabularyNameInput')
      this.meaningInput = this.container.querySelector('#meaningInput')
      this.meaningInputHelper = this.container.querySelector('#meaningInputHelper')
      this.contextSentenceInput = this.container.querySelector('#contextSentenceInput')
      this.submitInput = this.container.querySelector('#submitInput')
    }

    initEvents() {
      this.submitInput.addEventListener('click', this._onClickSubmitButton.bind(this))
      this.vocabularyNameInput.addEventListener('input', this._onChangeVocabularyNameInput.bind(this))
    }

    submitSuccess({ name }) {
      this.vocabularyNameInput.value = ''
      this.meaningInput.value = ''
      this.contextSentenceInput.value = ''
      this.meaningInputHelper.innerHTML = ''

      const addResult = this.container.querySelector('#addResult')
      addResult.innerHTML = `
        <div class="alert alert-primary" role="alert">
          ${name} was successfully added
        </div>
      `
    }

    submitFail({ reason }) {
      const addResult = this.container.querySelector('#addResult')
      addResult.innerHTML = `
        <div class="alert alert-danger" role="alert">
          ${reason}
        </div>
      `
    }

    _renderVocabularyMeanings({ meanings }) {
      if (meanings.length === 0) {
        this.meaningInputHelper.innerHTML = 'Please refer dictionary'
      } else {
        this.meaningInputHelper.innerHTML = `Suggestion: ${meanings.join(', ')}`
      }
    }

    _onClickSubmitButton(e) {
      const userId = this.liffData.context.userId
      const name = this.vocabularyNameInput.value
      const meaning = this.meaningInput.value
      const contextSentence = this.contextSentenceInput.value

      if (!name || !meaning || !contextSentence) {
        const reason = 'You should fill out all three fields (name, meaning, contextSentence)'
        this.submitFail({ reason })
        return
      }

      // contextSentence should include name validation
      // FIXME: name: hell 이고, contextSentence가 hellsing인경우 단어가 등록됨
      if (!contextSentence.trim().includes(name) && !this._isCapitalizedInclude({ vocabulary: name, contextSentence })) {
        const reason = 'Context sentence should contain vocabulary name'
        this.submitFail({ reason })
        return
      }

      this.presenter.sendVocabularyListData({
        userId, name, meaning, contextSentence
      })
    }

    _onChangeVocabularyNameInput(e) {
      clearInterval(this.lazyMeaningSearch)
      if (this.canGlosbeUse) {
        const vocabulary = e.target.value
        this.lazyMeaningSearch = setInterval(async () => {
          try {
            const meanings = await this.presenter.getVocabularyMeanings({ vocabulary })
            this._renderVocabularyMeanings({ meanings })
          } catch (error) {
            console.error(error)
            this._renderVocabularyMeanings({ meanings: [] })
            this.canGlosbeUse = false
          } finally {
            clearInterval(this.lazyMeaningSearch)
          }
        }, 1 * 1000)
      }
    }

    _isCapitalizedInclude({ vocabulary, contextSentence }) {
      if (vocabulary.length === 0) {
        return false
      }
      const splitVocabulary = vocabulary.split('')
      splitVocabulary[0] = splitVocabulary[0].toUpperCase()
      const capitalizedString = splitVocabulary.join('')

      return contextSentence.trim().includes(capitalizedString)
    }
  }

  (() => {
    liff.init((data) => {
      init(data)
    })
  })()
</script>