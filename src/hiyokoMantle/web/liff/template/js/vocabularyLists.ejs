<script>
  function init(data) {
    const container = document.querySelector('.container')

    new VocabularyListsView({ container, data })
  }

  class VocabularyListsPresenter {
    constructor(view, userId) {
      this.view = view
      this.userId = userId
      this.normalizedVocabularyLists = []
      this.vocabularyListsNum = 0
    }

    async fetchAndRenderNormalizedVocabularyLists() {
      try {
        await this._fetchNormalizedVocabularyLists()

        this.renderVocabularyMeaningView()
        this.renderVocabularyContextSentenceView()
      } catch(error) {
        console.error(error)
        alert('Unexpected error occured! Please contect to app provider and retry a few minutes later')
      }
    }

    async deleteVocabularyList({ vocaListId }) {
      try {
        const userId = this.userId

        await axios.delete('/<%= process.env.NODE_ENV %>/hiyokoSensei/api/vocabularyLists', {
          data: {
            userId,
            vocaListId
          }
        })

        // FIXME: just delete one element from this.normalizedVocabularyLists and rerender
        this.fetchAndRenderNormalizedVocabularyLists()
      } catch(error) {
        console.error(error)
        alert('Unexpected error occured! Please contect to app provider and retry a few minutes later')
      }
    }

    async editVocabularyListData({ userId, vocaListId, meaning, contextSentence, date }) {
      try {
        const result = await axios.put(`/<%= process.env.NODE_ENV %>/hiyokoSensei/api/vocabularyLists`, {
          userId, vocaListId, meaning, contextSentence
        })

        this.normalizedVocabularyLists.byDate[date] = this.normalizedVocabularyLists.byDate[date].map(vl => {
          if (vl.vocaListId === vocaListId) {
            vl.meaning = meaning
            vl.contextSentence = contextSentence
          }
          return vl
        })

        this.renderVocabularyMeaningView()
        this.renderVocabularyContextSentenceView()
      } catch(error) {
        console.error(error)
        alert(JSON.stringify(`Something went wrong! please retry a few minutes later`))
      }
    }

    renderVocabularyMeaningView() {
      this.view.renderVocabularyListsNum({ num: this.vocabularyListsNum })
      this.view.renderVocabularyMeaningCards({ normalizedVocabularyLists: this.normalizedVocabularyLists })
    }

    renderVocabularyContextSentenceView() {
      this.view.renderVocabularyContextSentenceCards({ normalizedVocabularyLists: this.normalizedVocabularyLists })
    }

    renderVocabularyListEditModal({ vocaListId, date }) {
      vocaListId = Number(vocaListId)

      const vocabularyList = this.normalizedVocabularyLists.byDate[date].filter(vl => vl.vocaListId === vocaListId)[0]

      this.view.renderVocabularyListEditModal({ vocabularyList, date })
    }

    async _fetchNormalizedVocabularyLists() {
      try {
        const res = await axios.get(`/<%= process.env.NODE_ENV %>/hiyokoSensei/api/vocabularyLists?userId=${this.userId}`)

        this.normalizedVocabularyLists = res.data || { allIds: [], byId: {} }
        this.vocabularyListsNum = res.data.allDates.reduce((num, date) => num + this.normalizedVocabularyLists.byDate[date].length, 0)
      } catch (error) {
        throw error
      }
    }
  }

  class VocabularyListsView {
    constructor({ container, data }) {
      this.liffData = data
      this.container = container
      this.presenter = new VocabularyListsPresenter(this, this.liffData.context.userId)

      this.initMembers()
      this.initEvents()
      this.initAction()
    }

    initMembers() {
      this.vocabularyListsHome = this.container.querySelector('#nav-vocabularyLists-home')
      this.vocabularyListsContextSentence = this.container.querySelector('#nav-vocabularyLists-contextSentence')

      this.vocabularyListsNum = this.container.querySelector('.js-vocabularyLists-num')

      this.vocabularyListEditModal = this.container.querySelector('.js-vocabulary-list-edit-modal')
      this.vocabularyListEditButton = this.container.querySelector('.js-vocabulary-list-edit-button')

      this.vocabularyListEditModalTitle = this.vocabularyListEditModal.querySelector('#modalEditTitle')
      this.vocabularyListEditModalVocaNameInput = this.vocabularyListEditModal.querySelector('#vocaNameEditInput')
      this.vocabularyListEditModalVocaListIdInput = this.vocabularyListEditModal.querySelector('#vocaListIdEditInput')
      this.vocabularyListEditModalDateInput = this.vocabularyListEditModal.querySelector('#dateEditInput')
      this.vocabularyListEditModalMeaningInput = this.vocabularyListEditModal.querySelector('#meaningEditInput')
      this.vocabularyListEditModalContextSentenceInput = this.vocabularyListEditModal.querySelector('#contextSentenceEditInput')
    }

    initEvents() {
      this.vocabularyListsHome.addEventListener('click', this._onClickDeleteButton.bind(this))
      this.vocabularyListEditButton.addEventListener('click', this._onClickEditButton.bind(this))
    }

    initAction() {
      this.presenter.fetchAndRenderNormalizedVocabularyLists()
    }

    _onClickDeleteButton(e) {
      const { nodeName } = e.srcElement.dataset

      switch (nodeName) {
        case 'vocabulary-list-delete-icon':
          e.stopPropagation()
          if (confirm('Really delete?')) {
            const { vocaListId } = e.srcElement.dataset

            this.presenter.deleteVocabularyList({ vocaListId })
          }
          break
        case 'vocabulary-list-row':
          const { vocaListId, date } = e.srcElement.dataset

          this.presenter.renderVocabularyListEditModal({ vocaListId, date })
          break
        default:
          break
      }
    }

    _onClickEditButton(e) {
      const userId = this.liffData.context.userId
      const vocaListId = +this.vocabularyListEditModalVocaListIdInput.value
      const name = this.vocabularyListEditModalVocaNameInput.value
      const meaning = this.vocabularyListEditModalMeaningInput.value.trim()
      const contextSentence = this.vocabularyListEditModalContextSentenceInput.value.trim()
      const date = this.vocabularyListEditModalDateInput.value

      if (!meaning || !contextSentence) {
        const reason = 'You should fill out all three fields (name, meaning, contextSentence)'
        alert(reason)
        return
      }

      if (!contextSentence.trim().includes(name) && !this._isCapitalizedInclude({ vocabulary: name, contextSentence })) {
        const reason = 'Context sentence should contain vocabulary name'
        alert(reason)
        return
      }

      this.presenter.editVocabularyListData({
        userId, vocaListId, meaning, contextSentence, date
      })
    }

    renderVocabularyListsNum({ num }) {
      this.vocabularyListsNum.innerHTML = num
    }

    renderVocabularyMeaningCards({ normalizedVocabularyLists }) {
      const dateCardHTMLArray = normalizedVocabularyLists.allDates.map((date) => {
        const vocabularyLists = normalizedVocabularyLists.byDate[date]
        return (`
          <div class="row js-vocabulary-card">
            <div class="card vocabulary-card-container">
              <div class="card-header">
                ${date}
              </div>
              <table class="table table-sm">
                <tbody>
                  ${
                    vocabularyLists.map((vocabularyList) => this._vocabularyMeaningTableRowHTML({ vocabularyList, date }))
                      .join('\n')
                  }
                </tbody>
              </table>
            </div>
          </div>
        `)
      })

      this.vocabularyListsHome.innerHTML = dateCardHTMLArray.join('\n')
    }

    renderVocabularyContextSentenceCards({ normalizedVocabularyLists }) {
      const dateCardHTMLArray = normalizedVocabularyLists.allDates.map((date) => {
        const vocabularyLists = normalizedVocabularyLists.byDate[date]
        return (`
          <div class="row js-vocabulary-card">
            <div class="card vocabulary-card-container">
              <div class="card-header">
                ${date}
              </div>
              <table class="table table-sm">
                <tbody>
                  ${
                    vocabularyLists.map((vocabularyList) => this._vocabularyContextSentenceTableRowHTML({ vocabularyList }))
                      .join('\n')
                  }
                </tbody>
              </table>
            </div>
          </div>
        `)
      })

      this.vocabularyListsContextSentence.innerHTML = dateCardHTMLArray.join('\n')
    }

    _vocabularyMeaningTableRowHTML({ vocabularyList, date }) {
      const { vocaListId } = vocabularyList
      return `
        <tr class="vocabulary-list-row" data-toggle="modal" data-target="#vocabularyListEditModalCenter">
          <th
            class="vocabulary-list-name"
            scope="row"
            data-node-name="vocabulary-list-row"
            data-voca-list-id="${vocaListId}"
            data-date="${date}"
          >
            ${vocabularyList.name}
          </th>
          <td
            class="vocabulary-list-meaning"
            data-node-name="vocabulary-list-row"
            data-voca-list-id="${vocaListId}"
            data-date="${date}"
          >
            ${vocabularyList.meaning}
          </td>
          <td class="vocabulary-list-delete">
            <i class="material-icons vocabulary-list-delete-icon" data-node-name="vocabulary-list-delete-icon" data-voca-list-id="${vocabularyList.vocaListId}">
              delete
            </i>
          </td>
        </tr>
      `
    }

    _vocabularyContextSentenceTableRowHTML({ vocabularyList }) {
      return `
        <tr>
          <th class="vocabulary-list-name" scope="row">${vocabularyList.name}</th>
          <td class="vocabulary-list-context-sentence">${vocabularyList.contextSentence}</td>
        </tr>
      `
    }

    renderVocabularyListEditModal({ vocabularyList, date }) {
      this.vocabularyListEditModalTitle.innerHTML = `${vocabularyList.name}`
      this.vocabularyListEditModalVocaListIdInput.value = `${vocabularyList.vocaListId}`
      this.vocabularyListEditModalVocaNameInput.value = `${vocabularyList.name}`
      this.vocabularyListEditModalDateInput.value = `${date}`
      this.vocabularyListEditModalMeaningInput.value = `${vocabularyList.meaning}`
      this.vocabularyListEditModalContextSentenceInput.innerHTML = `${vocabularyList.contextSentence}`
    }

    _isCapitalizedInclude({ vocabulary, contextSentence }) {
      if (vocabulary.length === 0) {
        return false
      }
      const splitVocabulary = vocabulary.split('')
      splitVocabulary[0] = splitVocabulary[0].toUpperCase()
      const capitalizedString = splitVocabulary.join('')

      return contextSentence.trim().includes(capitalizedString)
    }
  }

  (() => {
    liff.init((data) => {
      init(data)
    })
  })()
</script>